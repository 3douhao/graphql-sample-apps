type User @auth(
  # query : anyone can query 
  add: { rule: "<<is-this-user>>" },
  update: { rule: "<<is-this-user>>" },
  delete: { rule: "{$role: {eq: \"Admin\"}}" }
) {
  username: String! @id
  displayName: String
  avatarImg: String
  posts: [Post] @hasInverse(field: author)
  roles: [Permission] @hasInverse(field: user)
}

type Permission @auth(
  query: { or: [
    { rule: "<<permission-is-about-you>>" },
    { rule: "<<you-admin-the-permission-category>>" },
    { rule: "{$role: {eq: \"Admin\"}}" }
  ]},
  add: { or: [
    { rule: "<<you-admin-the-permission-category>>" },
    { rule: "{$role: {eq: \"Admin\"}}" }
  ]},
  update: { rule: "{$role: {eq: \"Admin\"}}" },
  delete: { or: [
    { rule: "<<you-admin-the-permission-category>>" },
    { rule: "{$role: {eq: \"Admin\"}}" }
  ]},
) {
  user: User!
  role: Role! @search
  forCategory: Category
}

enum Role {
  READER
  WRITER
  ADMINISTRATOR
}

type Post @auth(
  query: { or: [
    { rule: "<<has-any-post-permission>>" },
    { rule: "<<post-in-public-category>>" }
  ] },
  add: { rule: "<<has-write-permission>>" },
  update: { rule: "<<its-your-post>>" },
  delete: { rule:  "<<has-the-posts-category-admin>>" },
) {
  id: ID!
  title: String! @search(by: [term])
  text: String! @search(by: [fulltext])
  datePublished: DateTime
  likes: Int
  author: User!
  tags: String @search(by: [term])
  category: Category! @hasInverse(field: posts)
  comments: [Comment!]!
}

type Comment @auth(
  query: { or: [
    { rule: "<<has-any-comment-permission>>" },
    { rule: "<<comment-on-post-in-public-category>>" },
  ] },
  add: { rule: "<<author-and-has-write-permission>>" }
  update: { rule: "<<its-your-comment>>" },
  delete: { rule: "{$role: {eq: \"Admin\"}}" }
) {
  id: ID!
  text: String!
  commentsOn: Post! @hasInverse(field: comments)
  author: User!
}

type Category @auth(
  query: { or: [
    { rule: "<<has-any-category-permission>>" },
    { rule: "<<is-public-category>>" }
    { rule: "{$role: {eq: \"Admin\"}}" }
  ]}
  add: { rule: "{$role: {eq: \"Admin\"}}" },
  update: { or: [ 
    { rule: "{$role: {eq: \"Admin\"}}" },
    { rule: "<<has-category-admin>>" }
  ] }
  delete: { rule: "{$role: {eq: \"Admin\"}}" }
) {
  id: ID!
  name: String!
  posts: [Post]
  isPublic: Boolean @search
  permissions: [Permission] @hasInverse(field: forCategory)
}
